{
  "name": "rollup-plugin-commonjs",
  "version": "2.2.1",
  "description": "Convert CommonJS modules to ES2015",
  "devDependencies": {
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-es2015-rollup": "^1.0.0",
    "babel-register": "^6.3.13",
    "eslint": "^1.7.3",
    "mocha": "^2.3.3",
    "rollup": "^0.22.0",
    "rollup-plugin-babel": "^2.2.0",
    "rollup-plugin-npm": "^1.1.0",
    "source-map": "^0.5.3"
  },
  "main": "dist/rollup-plugin-commonjs.cjs.js",
  "jsnext:main": "dist/rollup-plugin-commonjs.es6.js",
  "scripts": {
    "test": "mocha --compilers js:babel-register",
    "pretest": "npm run build",
    "build": "rm -rf dist/* && rollup -c -f cjs -o dist/rollup-plugin-commonjs.cjs.js && rollup -c -f es6 -o dist/rollup-plugin-commonjs.es6.js",
    "prepublish": "npm test"
  },
  "files": [
    "src",
    "dist",
    "README.md"
  ],
  "dependencies": {
    "acorn": "^2.4.0",
    "estree-walker": "^0.2.0",
    "magic-string": "^0.10.0",
    "resolve": "^1.1.6",
    "rollup-pluginutils": "^1.2.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rollup/rollup-plugin-commonjs.git"
  },
  "author": {
    "name": "Rich Harris"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rollup/rollup-plugin-commonjs/issues"
  },
  "homepage": "https://github.com/rollup/rollup-plugin-commonjs",
  "readme": "# rollup-plugin-commonjs\n\nConvert CommonJS modules to ES6, so they can be included in a Rollup bundle\n\n\n## Installation\n\n```bash\nnpm install --save-dev rollup-plugin-commonjs\n```\n\n\n## Usage\n\nTypically, you would use this plugin alongside [rollup-plugin-npm](https://github.com/rollup/rollup-plugin-npm), so that you could bundle your CommonJS dependencies in `node_modules`.\n\n```js\nimport { rollup } from 'rollup';\nimport commonjs from 'rollup-plugin-commonjs';\nimport npm from 'rollup-plugin-npm';\n\nrollup({\n  entry: 'main.js',\n  plugins: [\n    npm({\n      jsnext: true,\n      main: true\n    }),\n\n    // non-CommonJS modules will be ignored, but you can also\n    // specifically include/exclude files\n    commonjs({\n      include: 'node_modules/**',\n      exclude: [ 'node_modules/foo/**', 'node_modules/bar/**' ],\n\n      // search for files other than .js files (must already\n      // be transpiled by a previous plugin!)\n      extensions: [ '.js', '.coffee' ] // defaults to [ '.js' ]\n    })\n  ]\n}).then(...)\n```\n\n### Custom named exports\n\nThis plugin will attempt to create named exports, where appropriate, so you can do this...\n\n```js\n// importer.js\nimport { named } from './exporter.js';\n\n// exporter.js\nmodule.exports = { named: 42 }; // or `exports.named = 42;`\n```\n\n...but that's not always possible:\n\n```js\n// importer.js\nimport { named } from 'my-lib';\n\n// my-lib.js\nvar myLib = exports;\nmyLib.named = 'you can\\'t see me';\n```\n\nIn those cases, you can specify custom named exports:\n\n```js\ncommonjs({\n  namedExports: {\n    // left-hand side can be an absolute path, a path\n    // relative to the current directory, or the name\n    // of a module in node_modules\n    'node_modules/my-lib/index.js': [ 'named' ]\n  }\n});\n```\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "rollup-plugin-commonjs@2.2.1",
  "_shasum": "8c9faa048e8acb70654f7c937bc9dedec50a6b39",
  "_resolved": "https://registry.npmjs.org/rollup-plugin-commonjs/-/rollup-plugin-commonjs-2.2.1.tgz",
  "_from": "https://registry.npmjs.org/rollup-plugin-commonjs/-/rollup-plugin-commonjs-2.2.1.tgz"
}
